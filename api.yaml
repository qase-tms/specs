openapi: 3.0.0
info:
  title: Qase.io API
  description: |
    You can use our API to access Qase.io API endpoints,
    which allows to retrieve information about entities
    stored in database and perform actions with them.
    The API is organized around REST.
  termsOfService: 'https://qase.io/terms'
  version: 1.0.0
  contact:
    name: Qase.io
    url: 'https://qase.io'
    email: support@qase.io
  license:
    name: Apache 2.0
    url: 'https://github.com/qase-tms/specs/blob/master/LICENSE'
externalDocs:
  url: 'https://developers.qase.io'
  description: Qase.io API Reference
tags:
  - name: projects
  - name: search
servers:
  - url: 'https://api.qase.io/v1'
    description: The production API server.
  - url: 'https://dev.qase.io/v1'
    description: The development API server.
paths:
  /project:
    get:
      operationId: project-list
      tags:
        - projects
      summary: Get All Projects.
      description: |
        This method allows to retrieve all projects available
        for your account. You can you limit and offset params
        to paginate.
      externalDocs:
        url: 'https://developers.qase.io/#get-all-projects'
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          $ref: '#/components/responses/ProjectListResponse'
  '/search/{projectCode}/{entity}':
    get:
      operationId: search
      tags:
        - search
      summary: Search entities by Qase Query Language.
      description: |
        This method allows to retrieve data sets for various
        entities using expressions with conditions. You can
        you limit and offset params to paginate.
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/ProjectCode'
        - name: entity
          in: path
          description: Type of entities to search.
          required: true
          schema:
            type: string
            enum:
              - case
        - name: query
          in: query
          description: Expression in Qase Query Language.
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 1000
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
components:
  schemas:
    Project:
      type: object
      properties:
        name:
          type: string
        code:
          type: string
        counts:
          type: object
          properties:
            cases:
              type: integer
            suites:
              type: integer
            milestones:
              type: integer
            runs:
              type: object
              properties:
                total:
                  type: integer
                active:
                  type: integer
            defects:
              type: object
              properties:
                total:
                  type: integer
                open:
                  type: integer
    Projects:
      type: array
      items:
        $ref: '#/components/schemas/Project'
    TestCase:
      type: object
      properties:
        id:
          type: integer
        position:
          type: integer
        title:
          type: string
        description:
          type: string
        preconditions:
          type: string
        postconditions:
          type: string
        severity:
          type: integer
        priority:
          type: integer
        type:
          type: integer
        layer:
          type: integer
        is_flaky:
          type: integer
        behavior:
          type: integer
        automation:
          type: integer
        status:
          type: integer
        milestone_id:
          type: integer
          nullable: true
        suite_id:
          type: integer
          nullable: true
        custom_fields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        steps:
          type: array
          items:
            $ref: '#/components/schemas/TestStep'
        params:
          anyOf:
            - type: array
              items: {}
            - type: object
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    Attachment:
      type: object
      properties:
        size:
          type: integer
        mime:
          type: string
        filename:
          type: string
        url:
          type: string
          format: uri
    CustomField:
      type: object
      properties:
        id:
          type: integer
        value:
          type: string
    TestStep:
      type: object
      properties:
        hash:
          type: string
        shared_step_hash:
          type: string
          nullable: true
        shared_step_nested_hash:
          type: string
          nullable: true
        position:
          type: integer
        action:
          type: string
        expected_result:
          type: string
        data:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
  headers:
    Token:
      description: API Access Token
      schema:
        type: string
      required: true
  responses:
    Response:
      description: Common response structure.
      content:
        any:
          schema:
            type: object
            properties:
              status:
                type: boolean
              result:
                type: object
    ProjectListResponse:
      description: A list of all projects.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/responses/Response/content/any/schema'
              - type: object
                properties:
                  result:
                    type: object
                    properties:
                      total:
                        type: integer
                      filtered:
                        type: integer
                      count:
                        type: integer
                      entities:
                        $ref: '#/components/schemas/Projects'
    SearchResponse:
      description: A list of found entities.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/responses/Response/content/any/schema'
              - type: object
                properties:
                  result:
                    type: object
                    properties:
                      entities:
                        type: array
                        items:
                          oneOf:
                            - $ref: '#/components/schemas/TestCase'
  parameters:
    Limit:
      name: limit
      description: A number of entities in result set.
      in: query
      schema:
        type: integer
        default: 100
    Offset:
      name: offset
      description: How many entities should be skipped.
      in: query
      schema:
        type: integer
        default: 0
    ProjectCode:
      name: projectCode
      in: path
      description: 'Code of project, where to seacrh entities.'
      required: true
      schema:
        type: string
        minLength: 2
        maxLength: 10
